{
  "jsGuide": [
    {
      "id": 1,
      "topic": "3 Ways to Make API Calls in JavaScript",
      "snippets": [
        {
          "id": 101,
          "title": "1. Using the Fetch API",
          "description": "The Fetch API is a modern, promise-based mechanism to make asynchronous requests to servers. It's a part of the window object in browsers.",
          "code": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('There was an error!', error));"
        },
        {
          "id": 102,
          "title": "2. Using XMLHttpRequest",
          "description": "XMLHttpRequest (XHR) is an older way of making HTTP requests in JavaScript. It's more complex than Fetch but is supported in very old browsers.",
          "code": "var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"https://api.example.com/data\", true);\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(JSON.parse(xhr.responseText));\n    }\n  };\n  xhr.send();"
        },
        {
          "id": 103,
          "title": "3. Using Axios (a third-party library)",
          "description": "Axios is a popular, promise-based HTTP client that works in both browsers and Node.js. It simplifies making HTTP requests.",
          "code": "axios.get('https://api.example.com/data')\n  .then(response => console.log(response.data))\n  .catch(error => console.error('There was an error!', error));"
        }
      ]
    },
    {
      "id": 2,
      "topic": "Understanding CORS (Cross-Origin Resource Sharing)",
      "snippets": [
        {
          "id": 201,
          "title": "What is CORS?",
          "description": "CORS is a security feature implemented by web browsers that controls access to resources (like APIs or fonts) on a web page from another domain outside the domain from which the resource originated.",
          "content": "<h5>The Same-Origin Policy:</h5><p>To understand CORS, we first need to understand the Same-Origin Policy. This policy is a fundamental security measure in web browsers that restricts how a document or script loaded from one origin can interact with resources from another origin. An origin is defined by the combination of protocol, domain, and port.</p><h5>For Example:</h5><ul><li>https://example.com/page1 and https://example.com/page2 have the same origin.</li><li>https://example.com and http://example.com have different origins (different protocol).</li><li>https://example.com and https://api.example.com have different origins (different subdomain).</li></ul>"
        },
        {
          "id": 202,
          "title": "Why CORS Exists?",
          "description": "CORS was introduced to allow servers to specify which origins are allowed to access their resources, thereby relaxing the Same-Origin Policy in a controlled manner. This is crucial for modern web applications that often need to make requests to APIs hosted on different domains."
        },
        {
          "id": 203,
          "title": "Common CORS Errors",
          "description": "Developers often encounter CORS errors when trying to make requests from a web application to an API on a different domain. A typical CORS error might look like this:",
          "content": "<blockquote>Access to fetch at 'https://api.example.com/data' from origin 'https://myapp.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</blockquote>"
        },
        {
          "id": 204,
          "title": "How CORS Works?",
          "description": "CORS works by using specific headers in the request and response. Here’s how it generally works:",
          "content": "<ul><li>The browser sends the request with an <strong>Origin</strong> header specifying the origin of the requesting page.</li><li>The server can then respond with:<ul><li>An <strong>Access-Control-Allow-Origin</strong> header specifying which origins are allowed.</li><li>Other CORS headers controlling allowed methods, headers, etc.</li></ul></li><li>If the server's response doesn't include appropriate CORS headers, the browser blocks the response.</li></ul>"
        },
        {
          "id": 205,
          "title": "Resolving CORS Issues",
          "description": "Here are some common ways to resolve CORS issues:",
          "content": "<ol><li><strong>Server-side Configuration:</strong> Configure the server to include the correct CORS headers.</li><li><strong>Using a Proxy:</strong> Set up a proxy server that adds the necessary CORS headers.</li><li><strong>JSONP (for GET requests only):</strong> Use JSONP to bypass CORS for GET requests by using script tags, which aren’t subject to the Same-Origin Policy.</li></ol>"
        }
      ]
    },
    {
      "id": 3,
      "topic": "ES13 features",
      "snippets": [
        {
          "id": 301,
          "title": "1. Array.findLast",
          "description": "Array.findLast allows you to find the last element in an array that satisfies a given condition.",
          "code": "const array = [5, 12, 8, 130, 44];\nconst found = array.findLast(element => element > 10);\nconsole.log(found); // Output: 44"
        },
        {
          "id": 302,
          "title": "2. Array.findLastIndex",
          "description": "Array.findLastIndex returns the index of the last element in an array that satisfies a given condition.",
          "code": "const array = [5, 12, 8, 130, 44];\nconst foundIndex = array.findLastIndex(element => element > 10);\nconsole.log(foundIndex); // Output: 4"
        },
        {
          "id": 303,
          "title": "1. Array.prototype.group",
          "description": "The group method groups the elements of an array based on a function you provide and returns an object where the keys are the results of applying the function and the values are arrays of elements.",
          "code": "const array = [6.1, 4.2, 6.3];\nconst grouped = array.group(num => Math.floor(num));\nconsole.log(grouped); // Output: { '4': [4.2], '6': [6.1, 6.3] }"
        },
        {
          "id": 304,
          "title": "2. Array.prototype.groupToMap",
          "description": "The groupToMap method works similarly to group, but it returns a Map instead of an object.",
          "code": "const array = [6.1, 4.2, 6.3];\nconst groupedMap = array.groupToMap(num => Math.floor(num));\nconsole.log(groupedMap); // Output: Map { 4 => [4.2], 6 => [6.1, 6.3] }"
        },
        {
          "id": 305,
          "title": "Simplified Class Fields",
          "description": "Class fields can now be declared directly within the class body, making them more straightforward and reducing boilerplate.",
          "code": "class Person {\n  name = 'John';\n  age = 30;\n}\n\nconst person = new Person();\nconsole.log(person.name); // Output: John"
        },
        {
          "id": 306,
          "title": "Using Private Fields",
          "description": "Private fields and methods are prefixed with a `#`, ensuring they are only accessible within the class itself, providing true encapsulation.",
          "code": "class Person {\n  #name = 'John';\n  getName() {\n    return this.#name;\n  }\n\nconst person = new Person();\nconsole.log(person.getName()); // Output: John\nconsole.log(person.#name); // SyntaxError: Private field '#name' must be declared in an enclosing class"
        },
        {
          "id": 307,
          "title": "Using Top-Level Await",
          "description": "Top-level await allows you to use the await keyword outside of async functions, making it easier to work with asynchronous code in modules.",
          "code": "const data = await fetch('https://api.example.com/data')\n.then(res => res.json());\nconsole.log(data);"
        },
        {
          "id": 308,
          "title": "Using the .at() Method",
          "description": "The .at() method allows you to access elements from an array or string using both positive and negative indices, making it easier to work with the last elements.",
          "code": "const array = [10, 20, 30, 40, 50];\nconsole.log(array.at(-1)); // Output: 50"
        },
        {
          "id": 309,
          "title": "Using Error Cause",
          "description": "The cause option in Error objects allows you to provide a nested error, which can be useful for debugging complex issues.",
          "code": "try {\n  throw new Error('Something went wrong',\n { cause: new Error('Network failure') });\n} catch (e) {\n  console.error(e.cause); // Output: Error: Network failure\n}"
        },
        {
          "id": 310,
          "title": "Using Regex Match Indices",
          "description": "The `d` flag in regular expressions allows you to get the start and end indices of matched groups, providing more precise control over pattern matching.",
          "code": "const regex = /a(b)c/d;\nconst match = regex.exec('abc');\nconsole.log(match.indices); // Output: [[0, 3], [1, 2]]"
        },
        {
          "id": 311,
          "title": "Using Array.prototype.toSorted",
          "description": "The toSorted method is similar to sort, but it returns a new array with the elements sorted, leaving the original array unchanged.",
          "code": "const array = [3, 1, 4, 1, 5, 9];\nconst sortedArray = array.toSorted();\nconsole.log(sortedArray); // Output: [1, 1, 3, 4, 5, 9]\nconsole.log(array);  // Original array remains unchanged: [3, 1, 4, 1, 5, 9]"
        },
        {
          "id": 312,
          "title": "Using Array.prototype.toReversed",
          "description": "The toReversed method returns a new array with the elements in reverse order, without modifying the original array.",
          "code": "const array = [1, 2, 3];\nconst reversedArray = array.toReversed();\nconsole.log(reversedArray); // Output: [3, 2, 1]\nconsole.log(array);  // Original array remains unchanged: [1, 2, 3]"
        },
        {
          "id": 313,
          "title": "Using Array.prototype.toSpliced",
          "description": "The toSpliced method works like splice but returns a new array with the changes applied, without altering the original array.",
          "code": "const array = [1, 2, 3, 4, 5];\nconst splicedArray = array.toSpliced(2, 2, 6, 7);\nconsole.log(splicedArray); // Output: [1, 2, 6, 7, 5]\nconsole.log(array);  // Original array remains unchanged: [1, 2, 3, 4, 5]"
        },
        {
          "id": 314,
          "title": "Using Array.prototype.with",
          "description": "The with method returns a new array where one element at the specified index is replaced with a new value, leaving the original array unchanged.",
          "code": "const array = [1, 2, 3];\nconst newArray = array.with(1, 4);\nconsole.log(newArray); // Output: [1, 4, 3]\nconsole.log(array);  // Original array remains unchanged: [1, 2, 3]"
        }
      ]
    },
    {
      "id": 4,
      "topic": "Node.js vs Express.js",
      "snippets": [
        {
          "id": 401,
          "title": "1. Node.js Example: Building a Simple Server",
          "description": "This example demonstrates how to create a basic server in Node.js using the built-in 'http' module. It handles two routes: the root '/' and '/message'. The server listens on port 3000.",
          "files": [
            {
              "filename": "app.js",
              "code": "const http = require(\"http\");\nconst routes = require(\"./routes\");\n\nconst server = http.createServer(routes.handler);\nserver.listen(3000);"
            },
            {
              "filename": "routes.js",
              "code": "const fs = require(\"fs\");\n\nconst requestHandler = (req, res) => {\n    const url = req.url;\n    const method = req.method;\n\n    if (url === \"/\") {\n        res.write(\"<html>\");\n        res.write(\"<head><title>Enter Message</title></head>\");\n        res.write(`<body><form action=\"/message\" method=\"POST\"><input type=\"text\" name=\"message\"><button type=\"submit\">Send</button></form></body>`);\n        res.write(\"</html>\");\n        return res.end();\n    }\n\n    if (url === \"/message\" && method === \"POST\") {\n        const body = [];\n        req.on(\"data\", (chunk) => {\n            console.log(\"chunk: \", chunk);\n            body.push(chunk);\n        });\n        req.on(\"end\", () => {\n            const parsedBody = Buffer.concat(body).toString();\n            const message = parsedBody.split(\"=\")[1];\n            console.log(\"message:\", message);\n            fs.writeFile(\"message.txt\", message, (err) => {\n                res.statusCode = 302;\n                res.setHeader(\"Location\", \"/\");\n                return res.end();\n            });\n        });\n    } else {\n        res.setHeader(\"Content-Type\", \"text/html\");\n        res.write(\"<html>\");\n        res.write(\"<head><title>Node.js Page</title></head>\");\n        res.write(\"<body><h1>Hi from Node.js server</h1></body>\");\n        res.write(\"</html>\");\n        res.end();\n    }\n};\n\nmodule.exports = { handler: requestHandler };"
            }
          ]
        },
        {
          "id": 402,
          "title": "2. Express.js Example: Simplifying Server Creation",
          "description": "This example shows how to achieve the same functionality as the Node.js example using Express.js, a popular framework that simplifies the process of building servers. The app listens on port 3000.",
          "files": [
            {
              "filename": "app.js",
              "code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst routes = require('./routes');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false })); // Parses URL-encoded bodies\napp.use(routes);\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
            },
            {
              "filename": "routes.js",
              "code": "const express = require('express');\nconst fs = require('fs');\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <head><title>Enter Message</title></head>\n      <body>\n        <form action=\"/message\" method=\"POST\">\n          <input type=\"text\" name=\"message\">\n          <button type=\"submit\">Send</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\nrouter.post('/message', (req, res) => {\n  const message = req.body.message; // Access the parsed message directly from req.body\n\n  fs.writeFile('message.txt', message, (err) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).send('Error writing file');\n    }\n\n    res.redirect('/');\n  });\n});\n\nrouter.get('*', (req, res) => {\n  res.send(`\n    <html>\n      <head><title>Node.js Page</title></head>\n      <body><h1>Hi from Node.js server</h1></body>\n    </html>\n  `);\n});\n\nmodule.exports = router;"
            }
          ]
        }
      ]
    }
  ]
}
